stages:
  - test

variables:
  # Docker image for the pipeline
  PYTHON_VERSION: "3.9"
  DJANGO_SETTINGS_MODULE: "yourproject.settings.production"  # Adjust for your settings structure
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  
  # Set these variables in GitLab CI/CD settings or in your project's variables
  # DOCKER_REGISTRY: "your-registry.com"
  # DOCKER_IMAGE: "your-username/your-django-app"
  # PRODUCTION_SERVER: "user@production-server"
  # STAGING_SERVER: "user@staging-server"  # Optional
  # SSH_PRIVATE_KEY: "your-ssh-private-key"

# Test stage
test:
  stage: test
  image: python:$PYTHON_VERSION
  before_script:
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  script:
    - python manage.py check
    - python manage.py test
  only:
    - merge_requests
    - master
    - main

# Build Docker image
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_REGISTRY_PASSWORD" | docker login $DOCKER_REGISTRY --username "$DOCKER_REGISTRY_USERNAME" --password-stdin
  script:
    - docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE:latest .
    - docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:latest
  only:
    - master
    - main

# Deploy to staging (optional)
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $STAGING_SERVER >> ~/.ssh/known_hosts
  script:
    - ssh $STAGING_SERVER "docker pull $DOCKER_REGISTRY/$DOCKER_IMAGE:latest"
    - ssh $STAGING_SERVER "docker-compose -f /path/to/your/staging/docker-compose.yml down"
    - ssh $STAGING_SERVER "docker-compose -f /path/to/your/staging/docker-compose.yml up -d"
    - ssh $STAGING_SERVER "docker exec your_django_container python manage.py migrate --noinput"
    - ssh $STAGING_SERVER "docker exec your_django_container python manage.py collectstatic --noinput"
  environment:
    name: staging
    url: https://staging.yourdomain.com
  only:
    - master
    - main

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  script:
    - ssh $PRODUCTION_SERVER "docker pull $DOCKER_REGISTRY/$DOCKER_IMAGE:latest"
    - ssh $PRODUCTION_SERVER "docker-compose -f /path/to/your/production/docker-compose.yml down"
    - ssh $PRODUCTION_SERVER "docker-compose -f /path/to/your/production/docker-compose.yml up -d"
    - ssh $PRODUCTION_SERVER "docker exec your_django_container python manage.py migrate --noinput"
    - ssh $PRODUCTION_SERVER "docker exec your_django_container python manage.py collectstatic --noinput"
  environment:
    name: production
    url: https://yourdomain.com
  when: manual
  only:
    - master
    - main